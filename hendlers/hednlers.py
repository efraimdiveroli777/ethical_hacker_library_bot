import re
from aiogram import types
from decimal import Decimal
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
import payment
import request.requests
from commands.keyboards import *
from request.requests import *
from text import texts

router = Router()

class Statedef(StatesGroup):
    waiting_for_text = State()
    waiting_for_text_2 = State()
    waiting_for_text_3 = State()
    waiting_for_text_4 = State()
    waiting_for_text_5 = State()
    waiting_for_text_6 = State()
    waiting_for_text_7 = State()
    waiting_for_email = State()
    waiting_for_amount = State()
    user_pay = State()

def get_text(key1, key2):
    return texts[key1][key2]

@router.message(Command("start"))
async def start(message: Message):
    request.requests.start_create(message.from_user.id, message.from_user.username)
    await message.answer_photo(photo="https://postpic.net/i/8hRQg", caption="üßë‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ethical Hacker Library üßë‚Äçüíª", reply_markup=start_button())

@router.callback_query(F.data == "back_profile")
async def subs(callback: CallbackQuery):
    data = get_user_profile(callback.from_user.id)
    data2 = get_sub_user(callback.from_user.id)

    new_photo = types.InputMediaPhoto(media="https://postpic.net/i/8hkjC",
                                      caption=f"""‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüë§ Username: {data[3]}\nüîë id: {data[1]}\n\nüí≥ –ë–∞–ª–∞–Ω—Å: {data[4]} —Ä—É–±\n\n‚è± –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data[2]}\n\nüëë –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n""")

    subscription_levels = [data2[0], data2[1], data2[2], data2[3], data2[4], data2[5]]
    level_names = ["NCrack", "Sqlmap", "MSFConsole", "SearchSploit", "Hydra", "Nmap"]
    level_emojis = ["‚úÖ" if level == 1 else "‚ùå" for level in subscription_levels]

    new_photo.caption += "\n".join([f"{name}: {emoji}" for name, emoji in zip(level_names, level_emojis)])
    new_photo.caption += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"

    await callback.message.edit_media(media=new_photo)
    await callback.message.edit_reply_markup(reply_markup=profile_button())

@router.callback_query(F.data == "subs")
async def subs(callback: CallbackQuery):
    new_photo = types.InputMediaPhoto(media="https://postpic.net/i/8hkjC",
                                      caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É")

    await callback.message.edit_media(media=new_photo)
    await callback.message.edit_reply_markup(reply_markup=subs_button(callback.from_user.id))

@router.callback_query(F.data == "back")
async def subs(callback: CallbackQuery):
    new_photo = types.InputMediaPhoto(media="https://postpic.net/i/8hRQg",
                                      caption=f"üßë‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ethical Hacker Library üßë‚Äçüíª")

    await callback.message.edit_media(media=new_photo)
    await callback.message.edit_reply_markup(reply_markup=start_button())



@router.callback_query(F.data == "profile")
async def subs(callback: CallbackQuery):
    data = get_user_profile(callback.from_user.id)
    data2 = get_sub_user(callback.from_user.id)


    new_photo = types.InputMediaPhoto(media="https://postpic.net/i/8hkjC",
                                      caption=f"""‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüë§ Username: {data[3]}\nüîë id: {data[1]}\n\nüí≥ –ë–∞–ª–∞–Ω—Å: {data[4]} —Ä—É–±\n\n‚è± –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data[2]}\n\nüëë –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n""")


    subscription_levels = [data2[0], data2[1], data2[2], data2[3], data2[4], data2[5]]
    level_names = ["NCrack", "Sqlmap", "MSFConsole", "SearchSploit", "Hydra", "Nmap"]
    level_emojis = ["‚úÖ" if level == 1 else "‚ùå" for level in subscription_levels]

    new_photo.caption += "\n".join([f"{name}: {emoji}" for name, emoji in zip(level_names, level_emojis)])
    new_photo.caption += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"

    await callback.message.edit_media(media=new_photo)
    await callback.message.edit_reply_markup(reply_markup=profile_button())

@router.callback_query(F.data == "info")
async def subs(callback: CallbackQuery):
    new_photo = types.InputMediaPhoto(media="https://postpic.net/i/8hkjC",
                                      caption=f"–ß—Ç–æ —Ç–∞–∫–æ–µ —ç—Ç–∏—á–Ω—ã–π —Ö–∞–∫–∏–Ω–≥ –∏ —á–µ–º—É –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å\n\n–≠—Ç–∏—á–Ω—ã–π —Ö–∞–∫–∏–Ω–≥ - —ç—Ç–æ –∫–∞–∫ –∏–≥—Ä–∞ –≤ '–ø–æ–π–º–∞–π –º–µ–Ω—è, –µ—Å–ª–∏\n—Å–º–æ–∂–µ—à—å', –Ω–æ —Å –¥–æ–±—Ä—ã–º–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏. –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ,\n—á—Ç–æ–±—ã –∫—Ä–∞—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤–∑–ª–∞–º—ã–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã –≤–æ\n–≤—Ä–µ–¥, —ç—Ç–∏—á–Ω—ã–µ —Ö–∞–∫–µ—Ä—ã (–∏–ª–∏ '–±–µ–ª—ã–µ —à–ª—è–ø—ã') –ø–æ–º–æ–≥–∞—é—Ç\n–∫–æ–º–ø–∞–Ω–∏—è–º –Ω–∞–π—Ç–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Å–≤–æ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö\n–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –û–Ω–∏ –∏–º–∏—Ç–∏—Ä—É—é—Ç –∞—Ç–∞–∫–∏\n–∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤, –Ω–æ —Å —Ü–µ–ª—å—é –∏—Ö –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å. ")

    await callback.message.edit_media(media=new_photo)
    await callback.message.edit_reply_markup(reply_markup=back_button())

@router.callback_query(F.data == "warning")
async def subs(callback: CallbackQuery):
    new_photo = types.InputMediaPhoto(media="https://postpic.net/i/8hkjC",
                                      caption=f"–≠—Ç–∏—á–Ω—ã–π —Ö–∞–∫–∏–Ω–≥ –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ?\n\n‚Ä¢ –î–æ–≥–æ–≤–æ—Ä: –≠—Ç–∏—á–Ω—ã–µ —Ö–∞–∫–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.\n‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: –û–Ω–∏ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–∞—é—Ç –æ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —É–≥—Ä–æ–∑–∞—Ö.\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º: –≠—Ç–∏—á–Ω—ã–µ —Ö–∞–∫–µ—Ä—ã ‚Äì —ç—Ç–æ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É. –û–Ω–∏ –Ω–µ —Å—Ç–∞—Ä–∞—é—Ç—Å—è –Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –∞ —Ç–æ–ª—å–∫–æ –ø–æ–º–æ—á—å.")

    await callback.message.edit_media(media=new_photo)
    await callback.message.edit_reply_markup(reply_markup=back_button())

@router.callback_query(F.data == "pay")
async def pay(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Statedef.waiting_for_email)
    await callback.message.answer("üì™ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞")

@router.message(Statedef.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text
    pattern = re.compile(r"^\S+@\S+\.\S+$")

    result = pattern.match(email)

    if result is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")
        return
    else:
        await state.update_data(email=email)
        await state.set_state(Statedef.waiting_for_amount)
        await message.answer("üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

@router.message(Statedef.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    amount_str = message.text
    try:
        amount = Decimal(amount_str).quantize(Decimal("0.00"))
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    await state.update_data(amount=amount)
    data = await state.get_data()

    email = data.get("email")
    amount = data.get("amount")

    url, check_payment = payment.create_oplata(email, amount)

    await message.answer_photo(reply_markup=buy(url, check_payment["id"]), caption="–û–ø–ª–∞—Ç–∞, (–ö–Ω–æ–ø–∫–∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É —Ä–∞–±–æ—Ç–∞–µ—Ç 1 —Ä–∞–∑ –µ—Å–ª–∏ —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–æ –∑–∞–±—ã–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –æ–ø–ª–∞—Ç—É)",
                               photo="https://postimg.cc/gnvzrrg1")

    id_pay = check_payment["id"]

    await state.set_state(Statedef.user_pay)

    await state.update_data(id_pay=check_payment["id"])

def check_pay(id):

    otvet = payment.oplata_check(id)

    if otvet == True:
        return True

    else:
        return False

@router.callback_query(F.data == "check_buy")
async def pay(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id_pay = data.get("id_pay")

    data = await state.get_data()
    amount = data.get("amount")

    is_paid = check_pay(id_pay)

    if is_paid:

        await callback.message.answer(text="–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞. –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã.")
        buy_balance(callback.from_user.id, amount)

    else:

        await callback.message.answer(text="–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

for i in ["nmap", "hydra", "searchsploit", "msfconsole", "sqlmap", "ncrack"]:
    @router.callback_query(F.data == f"{i}")
    async def yes_orr_no(callback: CallbackQuery, state: FSMContext):
        if get_program(callback.from_user.id, callback.data)[0] != 0:
            url = get_text("url", callback.data)
            await callback.message.answer(f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ {url}")
        else:
            if get_user_profile(callback.from_user.id)[4] >= 500.00:
                await callback.message.answer(text="–° –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—à–∏—Ç—Å—è 500 —Ä—É–±–ª–µ–π", reply_markup=yes_or_no())
                await state.set_state(Statedef.waiting_for_text)
                await state.update_data(programm=callback.data)
            else:
                await callback.message.answer(text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ")

@router.callback_query(F.data == "yes")
async def yes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    programm = data.get("programm")
    if get_program(callback.from_user.id, programm)[0] != 1:
        try:
            update_program(callback.from_user.id, programm)
            up_sub_user(callback.from_user.id, 500.00)
            await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É")
            new_photo = types.InputMediaPhoto(media="https://postimg.cc/jWpsMGXP",
                                              caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É")

            await callback.message.edit_media(media=new_photo)
            await callback.message.edit_reply_markup(reply_markup=subs_button(callback.from_user.id))

        except:
            await callback.message.answer("–û—à–∏–±–∫–∞")
    else:
        await callback.message.answer("–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É")

@router.callback_query(F.data == "subs_info")
async def subs_info(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer_photo(photo="https://postpic.net/i/8hRQg", caption="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ —É–∑–Ω–∞–π—Ç–µ –æ –Ω–µ–π", reply_markup=subs_button_info())

for i in ["nmap_info", "hydra_info", "searchsploit_info", "msfconsole_info", "sqlmap_info", "ncrack_info"]:
    @router.callback_query(F.data == f"{i}")
    async def get_info(callback: CallbackQuery, state: FSMContext):
        data = callback.data
        new_string = data.replace("_info", "")
        text = get_text("preview", new_string)
        await callback.message.answer(text=text, reply_markup=back_button())


@router.callback_query(F.data == "kali_linux")
async def kali_linux(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer_photo(photo="https://postpic.net/i/8hRQg",
                                        caption="–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Kali Linux https://telegra.ph/Ustanovka-Kali-Linux-v-VirtualBox-Poshagovoe-rukovodstvo-11-22",
                                        reply_markup=back_button())

@router.callback_query(F.data == "no")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer_photo(photo="https://postpic.net/i/8hRQg", caption="üßë‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ethical Hacker Library üßë‚Äçüíª", reply_markup=start_button())
